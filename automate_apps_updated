#!/bin/bash

start=$(date +"%T")
path=$(pwd)
delete_files=$1
apk_path='apks/*'
if [ "$delete_files" == "False" ]; then 
	apk_path='unit_tests/reference_apk/*'
fi



jadxFunction()
{
	mkdir $absolute_dir/decompiled;
	# Ejecuta el jadx
	"$path/tools/jadx/bin/jadx" -d $absolute_dir/decompiled $absolute_dir/base.apk;
	#jadx -d $absolute_dir/decompiled $absolute_dir/base.apk;

	# Estos dos greps se encargan de extraer las URLs dentro del codigo.
	grep -or -E "https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,4}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)"  $absolute_dir/decompiled/ --exclude-dir=resources --no-filename 2>/dev/null | uniq > $absolute_dir/net2_$stripped.txt
	grep -or -E "http:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,4}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)"  $absolute_dir/decompiled/ --exclude-dir=resources --no-filename 2>/dev/null | uniq > $absolute_dir/http_net2.txt
	
	# Parsear las urls para que tengan un formato concreto
	cat $absolute_dir/net2_$stripped.txt | cut -d "/" -f 3 | sort | uniq > $absolute_dir/_filtered_net2.txt

	# Hay veces que cuando usas el apk tool no saca el apktool
	cp $absolute_dir/decompiled/resources/AndroidManifest.xml $absolute_dir/base/AndroidManifest.xml
	internet=$(cat $absolute_dir/base/AndroidManifest.xml | grep -E "INTERNET|ACCESS_NETWORK_STATE|ACCESS_WIFI_STATE")
  	suid=$(cat $absolute_dir/base/AndroidManifest.xml | grep -Po "(?<=android:sharedUserId=)\"[^\"]+\"" | sed 's/\"//g')
	if [[ ! -z "$suid" ]]; then
	    if [[  -z "$internet"  ]]; then
	      echo "0" > $absolute_dir/$suid
		  has_internet=0
	    else
		  has_internet=1
	      find $path -name $suid -exec echo "1" > {} \;  
	    fi  
	else
	    if [[  ! -z "$internet" ]]; then
	      has_internet=1
	    else
	      has_internet=0
	    fi
	fi
	cd $path
	python3 main.py $absolute_dir $has_internet;
	sleep 2
}

apktoolFunction()
{
	for dir in $apk_path
	do
		absolute_dir=`realpath $dir`;
		mv $absolute_dir/*.apk $absolute_dir/base.apk 2>/dev/null;
		cd $absolute_dir
		if [[ $(ls | grep -x base | wc -l) -eq 0 && $(ls | grep -x base.apk | wc -l) -eq 1 && ! -f "apkTool.txt"  ]]; then			
			"$path/tools/apktool" d $absolute_dir/base.apk 1>/dev/null;
			if [ $? -ne 0 ]; then
				"$path/tools/apktool" d -f --no-res $absolute_dir/base.apk;
			fi
			touch apkTool.txt
			jadxFunction
			if [ $(find $absolute_dir/base -name "*apk" | wc -l) -ne 0 ]; then
				for apk in $(find $absolute_dir/base -name "*apk")
				do
					stripped=$(echo $apk | cut -d "/" -f 10 | cut -d "." -f 1)
					mkdir $path/$stripped/ && mv $apk $path/$stripped/base.apk
					cd $path
					apktoolFunction
				done
			else
				if [ "$delete_files" != "False" ]; then 
					rm -r $absolute_dir/base;
					rm -r $absolute_dir/decompiled;
				fi
				cd $path
			fi
		else
			cd $path
		fi
	done
 }


splitAPKs()
{		
	for dir in */
	do	
		stripped_dir=$(echo $dir | cut -d "/" -f 1)
		for f in $(ls $dir | grep "split")
		do
			stripped=$(echo $f | sed 's/.apk//g')
			new_Path=$(echo "$stripped_dir""_$stripped")
			mkdir $new_Path
			mv $(pwd)/$dir/$f $new_Path/base.apk; #2>/dev/null;
		done
	done
}

python3 -c "from db.database_utils import clear_database; clear_database()";

splitAPKs
apktoolFunction

python3 utils/collect_data.py;

find . -name "apkTool.txt" -exec rm {} \;

finish=$(date +"%T")

echo "Analysis successfully executed"
